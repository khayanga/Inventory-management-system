generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MilitaryRank {
  Private
  Corporal
  Sergeant
  Lieutenant
  Captain
  Major
  Colonel
  General
}

enum UserRole {
  ADMIN
  DUTY_OFFICER
}

enum WeaponStatus {
  AVAILABLE
  CHECKED_OUT
  MAINTENANCE
  DECOMMISSIONED
}

enum CheckoutStatus {
  ACTIVE
  RETURNED
  OVERDUE
  LOST
}

enum WeaponCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

model User {
  id            String       @id @default(uuid())
  militaryId    String       @unique @db.VarChar(20)
  email         String       @unique @db.VarChar(100)
  username      String       @unique @db.VarChar(100)
  rank          MilitaryRank
  role          UserRole     @default(DUTY_OFFICER)
  password      String
  verified      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  otp           String?
  otpExpiresAt  DateTime?
  otps          Otp[]        @relation("UserOtps")
  managedCheckouts Checkout[] @relation("DutyOfficerCheckouts")
  auditLogs     AuditLog[]   @relation("UserAuditLogs")
  
  @@index([createdAt])
}

model Officer {
  id          String       @id @default(uuid())
  militaryId  String       @unique @db.VarChar(20)
  name        String       @db.VarChar(100)
  rank        MilitaryRank
  unit        String       @db.VarChar(100)
  status      String       @default("ACTIVE") 
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  checkouts   Checkout[]
  
  @@index([militaryId])
  @@index([status])
}

model Otp {
  id        String   @id @default(uuid())
  otp       String   @db.VarChar(10)
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation("UserOtps", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Weapon {
  id           String       @id @default(uuid())
  serialNumber String       @unique
  model        String       @db.VarChar(50)
  type         String       @db.VarChar(30)
  location     String?      @db.VarChar(100)
  status       WeaponStatus @default(AVAILABLE)
  checkouts    Checkout[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  condition    WeaponCondition @default(EXCELLENT)
  dateAcquired DateTime? 
  lastInspectionDate DateTime?
  nextInspectionDate DateTime?
  
  @@index([serialNumber])
  @@index([status])
}

model Checkout {
  id           String       @id @default(uuid())
  weapon       Weapon       @relation(fields: [weaponId], references: [id])
  weaponId     String
  officer      Officer      @relation(fields: [officerId], references: [id])
  officerId    String
  dutyOfficer  User         @relation("DutyOfficerCheckouts", fields: [dutyOfficerId], references: [id])
  dutyOfficerId String
  checkoutTime DateTime     @default(now())
  expectedReturnTime DateTime?
  checkinTime  DateTime?
  purpose      String
  status       CheckoutStatus @default(ACTIVE)
  conditionAtCheckout WeaponCondition
  conditionAtCheckin WeaponCondition?
  notes        String?
  
  @@index([checkoutTime])
  @@index([status])
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String
  user      User     @relation("UserAuditLogs", fields: [userId], references: [id])
  metadata  Json?
  createdAt DateTime @default(now())
}