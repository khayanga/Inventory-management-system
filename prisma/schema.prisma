generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  Client
  Employee
}

enum EquipmentStatus {
  Available
  InUse
  Returned
  UnderMaintenance
}

enum OrderStatus {
  Pending
  Approved
  Shipped
  Delivered
  Cancelled
}

enum EmployeeRole {
  WarehouseManager
  EquipmentHandler
  InventoryManager
  AdminAssistant
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique @db.VarChar(255)
  username      String   @unique @db.VarChar(100)
  password      String   @db.VarChar(255)
  role          Role     @default(Client)
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  otp           String?
  otpExpiresAt  DateTime?

  otps          Otp[]
  customers     Customer[]
  orders        Order[]
  billingDetails BillingDetails[] 
  supplies      Supply[]
  equipmentLogs EquipmentLog[]
  employees     Employee[]

  @@index([createdAt])
}

model Otp {
  id        String   @id @default(uuid())
  otp       String   @db.VarChar(10)
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Customer {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(150)
  email     String   @unique @db.VarChar(255)
  phone     String   @db.VarChar(20)
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  orders    Order[]
  employees Employee[]
  equipmentLogs EquipmentLog[]

  @@index([createdAt])
}

model Product {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  description String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]  @relation("OrderProducts")
  supplies    Supply[]
}

model Order {
  id          String      @id @default(uuid())
  totalPrice  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId  String
  products    Product[]   @relation("OrderProducts")
  status      OrderStatus @default(Pending)

  @@index([createdAt])
}

model BillingDetails {
  id            String   @id @default(uuid())
  approverName  String   @db.VarChar(150)
  approverEmail String   @db.VarChar(255)
  approverPhone String   @db.VarChar(20)
  bankName      String
  accountNumber String   @db.VarChar(50)
  bankPaybill   String   @db.VarChar(50)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String     
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Supplier {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  contactName String   @db.VarChar(150)
  contactEmail String  @db.VarChar(255)
  contactPhone String  @db.VarChar(20)
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  supplies    Supply[]

  @@index([createdAt])
}

model Supply {
  id          String   @id @default(uuid())
  quantity    Int
  price       Float
  supplyDate  DateTime @default(now())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId  String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Equipment {
  id          String      @id @default(uuid())
  name        String      @db.VarChar(150)
  description String
  condition   String      @default("Good") @db.VarChar(50)
  status      EquipmentStatus @default(Available)
  location    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  equipmentLogs EquipmentLog[]
  assignedTo  Employee?   @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  assignedToId String?

  @@index([createdAt])
}

model EquipmentLog {
  id          String   @id @default(uuid())
  logType     String
  timestamp   DateTime @default(now())
  condition   String
  client      Customer  @relation(fields: [clientId], references: [id], onDelete: Cascade) 
  clientId    String
  employee    Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)  
  employeeId  String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade) 
  equipmentId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@index([timestamp])
}

model Employee {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(150)
  email       String   @unique @db.VarChar(255)
  phone       String   @db.VarChar(20)
  role        EmployeeRole
  clientId    String
  client      Customer @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  equipment   Equipment[]
  equipmentLogs EquipmentLog[]

  @@index([createdAt])
}
